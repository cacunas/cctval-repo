#include "exp01SensitiveDetector.hh"

#include "exp01RunAction.hh"
#include "G4StepPoint.hh"
#include "G4ThreeVector.hh"
#include "G4HCofThisEvent.hh"
#include "G4OpticalPhoton.hh"
#include "g4root.hh"

exp01SensitiveDetector::exp01SensitiveDetector(const G4String& name, exp01RunAction* runaction)
:G4VSensitiveDetector(name),
	runAction(runaction),
	energy(0.),
	time(0.),
	pos(G4ThreeVector(0.,0.,0.)),
	mom(G4ThreeVector(0.,0.,0.)),
	point(0)
{}

exp01SensitiveDetector::~exp01SensitiveDetector(){}

void exp01SensitiveDetector::Initialize(G4HCofThisEvent*){}

G4bool exp01SensitiveDetector::ProcessHits(G4Step* step, G4TouchableHistory*){

G4cout << "Processing Hit " << std::endl;
G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();

	if ( step->GetTrack()->GetDefinition() == G4OpticalPhoton::OpticalPhoton()){
		point = step->GetPreStepPoint();
		pos = point->GetPosition();
		mom = point->GetMomentumDirection();
		
		if ( std::abs(pos(2)) == 22.51*mm && pos(2)*mom(2)>0){
		
			energy = point->GetKineticEnergy();
			time = point->GetGlobalTime();
			analysisManager->FillH1(1, energy);
			G4cout<<"Energy" << energy << G4endl;
		}		

	}
	
	return true;
}	

void exp01SensitiveDetector::EndOfEvent(G4HCofThisEvent* ){
}
